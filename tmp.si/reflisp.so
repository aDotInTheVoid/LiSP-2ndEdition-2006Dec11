;;; Bytecode object file for si/reflisp.scm

;;; Dynamic variables
()

;;; Global modifiable variables
(EOF-OBJECT?)

;;; Quotations
#((LAMBDA (C B) (EXIT B)) ((EXIT (LOCAL 0 . 0)) (PROMPT-IN (LOCAL 1 . 0)) (PROMPT-OUT (LOCAL 1 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 0)) (MAKE-FLAMBDA (LOCAL 2 . 1)) (FLAMBDA? (LOCAL 2 . 2)) (FLAMBDA-APPLY (LOCAL 2 . 3))) IT EXTEND ERROR GLOBAL-ENV TOPLEVEL EVAL EVLIS EPROGN REFERENCE "Too few arguments" "Too much arguments" (LAMBDA (ENV NAMES VALUES) (IF (PAIR? NAMES) (IF (PAIR? VALUES) ((LAMBDA (NEWENV) (BEGIN (SET-VARIABLE-VALUE! (CAR NAMES) NEWENV (CAR VALUES)) (EXTEND NEWENV (CDR NAMES) (CDR VALUES)))) (ENRICH ENV (CAR NAMES))) (ERROR "Too few arguments" NAMES)) (IF (SYMBOL? NAMES) ((LAMBDA (NEWENV) (BEGIN (SET-VARIABLE-VALUE! NAMES NEWENV VALUES) NEWENV)) (ENRICH ENV NAMES)) (IF (NULL? NAMES) (IF (NULL? VALUES) ENV (ERROR "Too much arguments" VALUES)) ENV)))) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) (LAMBDA (MSG HINT) (EXIT (LIST MSG HINT))) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) (LAMBDA (GENV) (SET! GLOBAL-ENV GENV) (DISPLAY PROMPT-IN) ((LAMBDA (RESULT) (SET! IT RESULT) (DISPLAY PROMPT-OUT) (DISPLAY RESULT) (NEWLINE)) ((LAMBDA (E) (IF (EOF-OBJECT? E) (EXIT E) (EVAL E GLOBAL-ENV))) (READ))) (TOPLEVEL GLOBAL-ENV)) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) (LAMBDA (E R) (IF (PAIR? E) ((LAMBDA (F) (IF (FLAMBDA? F) (FLAMBDA-APPLY F R (CDR E)) (APPLY F (EVLIS (CDR E) R)))) (EVAL (CAR E) R)) (IF (SYMBOL? E) (REFERENCE E R) E))) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) (LAMBDA (E* R) (IF (PAIR? E*) ((LAMBDA (V) (CONS V (EVLIS (CDR E*) R))) (EVAL (CAR E*) R)) NIL)) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) (LAMBDA (E+ R) (IF (PAIR? (CDR E+)) (BEGIN (EVAL (CAR E+) R) (EPROGN (CDR E+) R)) (EVAL (CAR E+) R))) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) "No such variable" (LAMBDA (NAME R) (IF (VARIABLE-DEFINED? NAME R) (VARIABLE-VALUE NAME R) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (VARIABLE-VALUE NAME GLOBAL-ENV) (ERROR "No such variable" NAME)))) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) (LAMBDA (R QUOTATION) QUOTATION) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) (LAMBDA (R CONDITION THEN ELSE) (EVAL (IF (EVAL CONDITION R) THEN ELSE) R)) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) "No such variable" (LAMBDA (R NAME FORM) ((LAMBDA (V) (IF (VARIABLE-DEFINED? NAME R) (SET-VARIABLE-VALUE! NAME R V) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (SET-VARIABLE-VALUE! NAME GLOBAL-ENV V) (ERROR "No such variable" NAME)))) (EVAL FORM R))) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) (LAMBDA () (EPROGN BODY (EXTEND R VARIABLES VALUES))) ((R (LOCAL 0 . 0)) (VARIABLES (LOCAL 0 . 1)) (BODY (LOCAL 0 . 2)) (IT (LOCAL 1 . 0)) (EXTEND (LOCAL 1 . 1)) (ERROR (LOCAL 1 . 2)) (GLOBAL-ENV (LOCAL 1 . 3)) (TOPLEVEL (LOCAL 1 . 4)) (EVAL (LOCAL 1 . 5)) (EVLIS (LOCAL 1 . 6)) (EPROGN (LOCAL 1 . 7)) (REFERENCE (LOCAL 1 . 8)) (EXIT (LOCAL 2 . 0)) (PROMPT-IN (LOCAL 3 . 0)) (PROMPT-OUT (LOCAL 3 . 1)) (MAKE-TOPLEVEL (LOCAL 4 . 0)) (MAKE-FLAMBDA (LOCAL 4 . 1)) (FLAMBDA? (LOCAL 4 . 2)) (FLAMBDA-APPLY (LOCAL 4 . 3))) (LAMBDA (R VARIABLES) (LAMBDA VALUES (EPROGN BODY (EXTEND R VARIABLES VALUES)))) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) (LAMBDA (RR) (EPROGN BODY (EXTEND R VARIABLES (CONS RR PARAMETERS)))) ((R (LOCAL 0 . 0)) (VARIABLES (LOCAL 0 . 1)) (BODY (LOCAL 0 . 2)) (IT (LOCAL 1 . 0)) (EXTEND (LOCAL 1 . 1)) (ERROR (LOCAL 1 . 2)) (GLOBAL-ENV (LOCAL 1 . 3)) (TOPLEVEL (LOCAL 1 . 4)) (EVAL (LOCAL 1 . 5)) (EVLIS (LOCAL 1 . 6)) (EPROGN (LOCAL 1 . 7)) (REFERENCE (LOCAL 1 . 8)) (EXIT (LOCAL 2 . 0)) (PROMPT-IN (LOCAL 3 . 0)) (PROMPT-OUT (LOCAL 3 . 1)) (MAKE-TOPLEVEL (LOCAL 4 . 0)) (MAKE-FLAMBDA (LOCAL 4 . 1)) (FLAMBDA? (LOCAL 4 . 2)) (FLAMBDA-APPLY (LOCAL 4 . 3))) (LAMBDA (R VARIABLES) (MAKE-FLAMBDA (LAMBDA (RR . PARAMETERS) (EPROGN BODY (EXTEND R VARIABLES (CONS RR PARAMETERS)))))) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) (LAMBDA (R HANDLER) (MONITOR (EVAL HANDLER R) (EPROGN BODY R))) ((IT (LOCAL 0 . 0)) (EXTEND (LOCAL 0 . 1)) (ERROR (LOCAL 0 . 2)) (GLOBAL-ENV (LOCAL 0 . 3)) (TOPLEVEL (LOCAL 0 . 4)) (EVAL (LOCAL 0 . 5)) (EVLIS (LOCAL 0 . 6)) (EPROGN (LOCAL 0 . 7)) (REFERENCE (LOCAL 0 . 8)) (EXIT (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 2 . 0)) (PROMPT-OUT (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 0)) (MAKE-FLAMBDA (LOCAL 3 . 1)) (FLAMBDA? (LOCAL 3 . 2)) (FLAMBDA-APPLY (LOCAL 3 . 3))) ('(LOCAL 0 . 0) (IF (LOCAL 0 . 1)) (SET! (LOCAL 0 . 2)) (LAMBDA (LOCAL 0 . 3)) (FLAMBDA (LOCAL 0 . 4)) (MONITOR (LOCAL 0 . 5)) (IT (LOCAL 1 . 0)) (EXTEND (LOCAL 1 . 1)) (ERROR (LOCAL 1 . 2)) (GLOBAL-ENV (LOCAL 1 . 3)) (TOPLEVEL (LOCAL 1 . 4)) (EVAL (LOCAL 1 . 5)) (EVLIS (LOCAL 1 . 6)) (EPROGN (LOCAL 1 . 7)) (REFERENCE (LOCAL 1 . 8)) (EXIT (LOCAL 2 . 0)) (PROMPT-IN (LOCAL 3 . 0)) (PROMPT-OUT (LOCAL 3 . 1)) (MAKE-TOPLEVEL (LOCAL 4 . 0)) (MAKE-FLAMBDA (LOCAL 4 . 1)) (FLAMBDA? (LOCAL 4 . 2)) (FLAMBDA-APPLY (LOCAL 4 . 3))) (LAMBDA (EXIT) (MONITOR (LAMBDA (C B) (EXIT B)) ((LAMBDA (IT EXTEND ERROR GLOBAL-ENV TOPLEVEL EVAL EVLIS EPROGN REFERENCE) (SET! EXTEND (LAMBDA (ENV NAMES VALUES) (IF (PAIR? NAMES) (IF (PAIR? VALUES) ((LAMBDA (NEWENV) (BEGIN (SET-VARIABLE-VALUE! (CAR NAMES) NEWENV (CAR VALUES)) (EXTEND NEWENV (CDR NAMES) (CDR VALUES)))) (ENRICH ENV (CAR NAMES))) (ERROR "Too few arguments" NAMES)) (IF (SYMBOL? NAMES) ((LAMBDA (NEWENV) (BEGIN (SET-VARIABLE-VALUE! NAMES NEWENV VALUES) NEWENV)) (ENRICH ENV NAMES)) (IF (NULL? NAMES) (IF (NULL? VALUES) ENV (ERROR "Too much arguments" VALUES)) ENV))))) (SET! ERROR (LAMBDA (MSG HINT) (EXIT (LIST MSG HINT)))) (SET! TOPLEVEL (LAMBDA (GENV) (SET! GLOBAL-ENV GENV) (DISPLAY PROMPT-IN) ((LAMBDA (RESULT) (SET! IT RESULT) (DISPLAY PROMPT-OUT) (DISPLAY RESULT) (NEWLINE)) ((LAMBDA (E) (IF (EOF-OBJECT? E) (EXIT E) (EVAL E GLOBAL-ENV))) (READ))) (TOPLEVEL GLOBAL-ENV))) (SET! EVAL (LAMBDA (E R) (IF (PAIR? E) ((LAMBDA (F) (IF (FLAMBDA? F) (FLAMBDA-APPLY F R (CDR E)) (APPLY F (EVLIS (CDR E) R)))) (EVAL (CAR E) R)) (IF (SYMBOL? E) (REFERENCE E R) E)))) (SET! EVLIS (LAMBDA (E* R) (IF (PAIR? E*) ((LAMBDA (V) (CONS V (EVLIS (CDR E*) R))) (EVAL (CAR E*) R)) NIL))) (SET! EPROGN (LAMBDA (E+ R) (IF (PAIR? (CDR E+)) (BEGIN (EVAL (CAR E+) R) (EPROGN (CDR E+) R)) (EVAL (CAR E+) R)))) (SET! REFERENCE (LAMBDA (NAME R) (IF (VARIABLE-DEFINED? NAME R) (VARIABLE-VALUE NAME R) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (VARIABLE-VALUE NAME GLOBAL-ENV) (ERROR "No such variable" NAME))))) ((LAMBDA (QUOTE IF SET! LAMBDA FLAMBDA MONITOR) (TOPLEVEL (THE-ENVIRONMENT))) (MAKE-FLAMBDA (LAMBDA (R QUOTATION) QUOTATION)) (MAKE-FLAMBDA (LAMBDA (R CONDITION THEN ELSE) (EVAL (IF (EVAL CONDITION R) THEN ELSE) R))) (MAKE-FLAMBDA (LAMBDA (R NAME FORM) ((LAMBDA (V) (IF (VARIABLE-DEFINED? NAME R) (SET-VARIABLE-VALUE! NAME R V) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (SET-VARIABLE-VALUE! NAME GLOBAL-ENV V) (ERROR "No such variable" NAME)))) (EVAL FORM R)))) (MAKE-FLAMBDA (LAMBDA (R VARIABLES . BODY) (LAMBDA VALUES (EPROGN BODY (EXTEND R VARIABLES VALUES))))) (MAKE-FLAMBDA (LAMBDA (R VARIABLES . BODY) (MAKE-FLAMBDA (LAMBDA (RR . PARAMETERS) (EPROGN BODY (EXTEND R VARIABLES (CONS RR PARAMETERS))))))) (MAKE-FLAMBDA (LAMBDA (R HANDLER . BODY) (MONITOR (EVAL HANDLER R) (EPROGN BODY R)))))) 'IT 'EXTEND 'ERROR 'GLOBAL-ENV 'TOPLEVEL 'EVAL 'EVLIS 'EPROGN 'REFERENCE))) ((PROMPT-IN (LOCAL 0 . 0)) (PROMPT-OUT (LOCAL 0 . 1)) (MAKE-TOPLEVEL (LOCAL 1 . 0)) (MAKE-FLAMBDA (LOCAL 1 . 1)) (FLAMBDA? (LOCAL 1 . 2)) (FLAMBDA-APPLY (LOCAL 1 . 3))) (LAMBDA (PROMPT-IN PROMPT-OUT) (CALL/CC (LAMBDA (EXIT) (MONITOR (LAMBDA (C B) (EXIT B)) ((LAMBDA (IT EXTEND ERROR GLOBAL-ENV TOPLEVEL EVAL EVLIS EPROGN REFERENCE) (SET! EXTEND (LAMBDA (ENV NAMES VALUES) (IF (PAIR? NAMES) (IF (PAIR? VALUES) ((LAMBDA (NEWENV) (BEGIN (SET-VARIABLE-VALUE! (CAR NAMES) NEWENV (CAR VALUES)) (EXTEND NEWENV (CDR NAMES) (CDR VALUES)))) (ENRICH ENV (CAR NAMES))) (ERROR "Too few arguments" NAMES)) (IF (SYMBOL? NAMES) ((LAMBDA (NEWENV) (BEGIN (SET-VARIABLE-VALUE! NAMES NEWENV VALUES) NEWENV)) (ENRICH ENV NAMES)) (IF (NULL? NAMES) (IF (NULL? VALUES) ENV (ERROR "Too much arguments" VALUES)) ENV))))) (SET! ERROR (LAMBDA (MSG HINT) (EXIT (LIST MSG HINT)))) (SET! TOPLEVEL (LAMBDA (GENV) (SET! GLOBAL-ENV GENV) (DISPLAY PROMPT-IN) ((LAMBDA (RESULT) (SET! IT RESULT) (DISPLAY PROMPT-OUT) (DISPLAY RESULT) (NEWLINE)) ((LAMBDA (E) (IF (EOF-OBJECT? E) (EXIT E) (EVAL E GLOBAL-ENV))) (READ))) (TOPLEVEL GLOBAL-ENV))) (SET! EVAL (LAMBDA (E R) (IF (PAIR? E) ((LAMBDA (F) (IF (FLAMBDA? F) (FLAMBDA-APPLY F R (CDR E)) (APPLY F (EVLIS (CDR E) R)))) (EVAL (CAR E) R)) (IF (SYMBOL? E) (REFERENCE E R) E)))) (SET! EVLIS (LAMBDA (E* R) (IF (PAIR? E*) ((LAMBDA (V) (CONS V (EVLIS (CDR E*) R))) (EVAL (CAR E*) R)) NIL))) (SET! EPROGN (LAMBDA (E+ R) (IF (PAIR? (CDR E+)) (BEGIN (EVAL (CAR E+) R) (EPROGN (CDR E+) R)) (EVAL (CAR E+) R)))) (SET! REFERENCE (LAMBDA (NAME R) (IF (VARIABLE-DEFINED? NAME R) (VARIABLE-VALUE NAME R) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (VARIABLE-VALUE NAME GLOBAL-ENV) (ERROR "No such variable" NAME))))) ((LAMBDA (QUOTE IF SET! LAMBDA FLAMBDA MONITOR) (TOPLEVEL (THE-ENVIRONMENT))) (MAKE-FLAMBDA (LAMBDA (R QUOTATION) QUOTATION)) (MAKE-FLAMBDA (LAMBDA (R CONDITION THEN ELSE) (EVAL (IF (EVAL CONDITION R) THEN ELSE) R))) (MAKE-FLAMBDA (LAMBDA (R NAME FORM) ((LAMBDA (V) (IF (VARIABLE-DEFINED? NAME R) (SET-VARIABLE-VALUE! NAME R V) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (SET-VARIABLE-VALUE! NAME GLOBAL-ENV V) (ERROR "No such variable" NAME)))) (EVAL FORM R)))) (MAKE-FLAMBDA (LAMBDA (R VARIABLES . BODY) (LAMBDA VALUES (EPROGN BODY (EXTEND R VARIABLES VALUES))))) (MAKE-FLAMBDA (LAMBDA (R VARIABLES . BODY) (MAKE-FLAMBDA (LAMBDA (RR . PARAMETERS) (EPROGN BODY (EXTEND R VARIABLES (CONS RR PARAMETERS))))))) (MAKE-FLAMBDA (LAMBDA (R HANDLER . BODY) (MONITOR (EVAL HANDLER R) (EPROGN BODY R)))))) 'IT 'EXTEND 'ERROR 'GLOBAL-ENV 'TOPLEVEL 'EVAL 'EVLIS 'EPROGN 'REFERENCE))))) ((MAKE-TOPLEVEL (LOCAL 0 . 0)) (MAKE-FLAMBDA (LOCAL 0 . 1)) (FLAMBDA? (LOCAL 0 . 2)) (FLAMBDA-APPLY (LOCAL 0 . 3))) "?? " "== " (LAMBDA (MAKE-TOPLEVEL MAKE-FLAMBDA FLAMBDA? FLAMBDA-APPLY) (SET! MAKE-TOPLEVEL (LAMBDA (PROMPT-IN PROMPT-OUT) (CALL/CC (LAMBDA (EXIT) (MONITOR (LAMBDA (C B) (EXIT B)) ((LAMBDA (IT EXTEND ERROR GLOBAL-ENV TOPLEVEL EVAL EVLIS EPROGN REFERENCE) (SET! EXTEND (LAMBDA (ENV NAMES VALUES) (IF (PAIR? NAMES) (IF (PAIR? VALUES) ((LAMBDA (NEWENV) (BEGIN (SET-VARIABLE-VALUE! (CAR NAMES) NEWENV (CAR VALUES)) (EXTEND NEWENV (CDR NAMES) (CDR VALUES)))) (ENRICH ENV (CAR NAMES))) (ERROR "Too few arguments" NAMES)) (IF (SYMBOL? NAMES) ((LAMBDA (NEWENV) (BEGIN (SET-VARIABLE-VALUE! NAMES NEWENV VALUES) NEWENV)) (ENRICH ENV NAMES)) (IF (NULL? NAMES) (IF (NULL? VALUES) ENV (ERROR "Too much arguments" VALUES)) ENV))))) (SET! ERROR (LAMBDA (MSG HINT) (EXIT (LIST MSG HINT)))) (SET! TOPLEVEL (LAMBDA (GENV) (SET! GLOBAL-ENV GENV) (DISPLAY PROMPT-IN) ((LAMBDA (RESULT) (SET! IT RESULT) (DISPLAY PROMPT-OUT) (DISPLAY RESULT) (NEWLINE)) ((LAMBDA (E) (IF (EOF-OBJECT? E) (EXIT E) (EVAL E GLOBAL-ENV))) (READ))) (TOPLEVEL GLOBAL-ENV))) (SET! EVAL (LAMBDA (E R) (IF (PAIR? E) ((LAMBDA (F) (IF (FLAMBDA? F) (FLAMBDA-APPLY F R (CDR E)) (APPLY F (EVLIS (CDR E) R)))) (EVAL (CAR E) R)) (IF (SYMBOL? E) (REFERENCE E R) E)))) (SET! EVLIS (LAMBDA (E* R) (IF (PAIR? E*) ((LAMBDA (V) (CONS V (EVLIS (CDR E*) R))) (EVAL (CAR E*) R)) NIL))) (SET! EPROGN (LAMBDA (E+ R) (IF (PAIR? (CDR E+)) (BEGIN (EVAL (CAR E+) R) (EPROGN (CDR E+) R)) (EVAL (CAR E+) R)))) (SET! REFERENCE (LAMBDA (NAME R) (IF (VARIABLE-DEFINED? NAME R) (VARIABLE-VALUE NAME R) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (VARIABLE-VALUE NAME GLOBAL-ENV) (ERROR "No such variable" NAME))))) ((LAMBDA (QUOTE IF SET! LAMBDA FLAMBDA MONITOR) (TOPLEVEL (THE-ENVIRONMENT))) (MAKE-FLAMBDA (LAMBDA (R QUOTATION) QUOTATION)) (MAKE-FLAMBDA (LAMBDA (R CONDITION THEN ELSE) (EVAL (IF (EVAL CONDITION R) THEN ELSE) R))) (MAKE-FLAMBDA (LAMBDA (R NAME FORM) ((LAMBDA (V) (IF (VARIABLE-DEFINED? NAME R) (SET-VARIABLE-VALUE! NAME R V) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (SET-VARIABLE-VALUE! NAME GLOBAL-ENV V) (ERROR "No such variable" NAME)))) (EVAL FORM R)))) (MAKE-FLAMBDA (LAMBDA (R VARIABLES . BODY) (LAMBDA VALUES (EPROGN BODY (EXTEND R VARIABLES VALUES))))) (MAKE-FLAMBDA (LAMBDA (R VARIABLES . BODY) (MAKE-FLAMBDA (LAMBDA (RR . PARAMETERS) (EPROGN BODY (EXTEND R VARIABLES (CONS RR PARAMETERS))))))) (MAKE-FLAMBDA (LAMBDA (R HANDLER . BODY) (MONITOR (EVAL HANDLER R) (EPROGN BODY R)))))) 'IT 'EXTEND 'ERROR 'GLOBAL-ENV 'TOPLEVEL 'EVAL 'EVLIS 'EPROGN 'REFERENCE)))))) (MAKE-TOPLEVEL "?? " "== ")) () MAKE-TOPLEVEL 1234567890. (LAMBDA (BEHAVIOR) (CONS FLAMBDA-TAG BEHAVIOR)) ((FLAMBDA-TAG (LOCAL 0 . 0))) (LAMBDA (O) (IF (PAIR? O) (EQ? (CAR O) FLAMBDA-TAG) #F)) ((FLAMBDA-TAG (LOCAL 0 . 0))) (LAMBDA (F R PARMS) (APPLY (CDR F) R PARMS)) ((FLAMBDA-TAG (LOCAL 0 . 0))))

;;; Bytecode
#(245 20 247 38 43 19 22 34 40 7 28 224 4 9 52 9 53 75 5 32 40 7 28 197 4 9 48 9 49 73 32 19 21 34 40 7 28 177 4 9 46 9 47 72 32 40 6 30 17 9 0 9 1 73 32 6 1 0 34 2 34 51 60 39 46 43 246 9 2 34 9 3 34 9 4 34 9 5 34 9 6 34 9 7 34 9 8 34 9 9 34 9 10 34 55 10 64 8 64 7 64 6 64 5 64 4 63 62 61 60 32 40 6 30 171 9 13 9 14 74 32 2 92 31 86 3 92 31 66 19 34 34 1 34 2 90 34 52 61 60 39 37 45 38 34 51 60 32 19 38 34 6 1 1 90 34 1 34 6 1 2 90 34 53 62 61 60 39 37 45 38 6 2 1 34 1 34 6 1 1 91 34 6 1 2 91 34 53 62 61 60 39 46 30 14 6 1 2 34 9 11 34 2 34 52 61 60 39 46 30 74 2 93 31 42 19 34 34 1 34 2 34 52 61 60 39 37 45 38 34 51 60 32 19 38 34 6 1 1 34 1 34 6 1 2 34 53 62 61 60 39 37 45 38 1 30 28 2 96 31 23 3 96 31 3 1 30 14 6 1 2 34 9 12 34 3 34 52 61 60 39 46 30 1 1 43 22 40 6 30 30 9 15 9 16 73 32 6 2 0 34 19 23 34 1 34 2 34 52 61 60 39 37 45 38 34 51 60 39 46 43 23 40 6 30 93 9 17 9 18 72 32 1 26 1 3 6 3 0 94 89 34 51 60 32 8 0 34 1 34 51 60 39 37 45 38 31 14 6 3 0 34 1 34 51 60 39 37 45 38 30 17 6 2 5 34 1 34 6 2 3 34 52 61 60 39 37 45 38 33 34 51 60 32 1 26 2 0 6 4 1 94 1 94 88 33 6 1 4 34 6 1 3 34 51 60 39 46 43 25 4 40 6 30 121 9 19 9 20 73 32 1 92 31 90 6 1 5 34 1 90 34 2 34 52 61 60 39 37 45 38 34 51 60 32 6 5 2 34 1 34 51 60 39 37 45 38 31 23 6 5 3 34 1 34 6 1 1 34 6 1 0 91 34 53 62 61 60 39 46 30 31 19 22 34 1 34 6 2 6 34 6 1 0 91 34 6 1 1 34 52 61 60 39 37 45 38 34 52 61 60 39 46 30 20 1 93 31 15 6 1 8 34 1 34 2 34 52 61 60 39 46 30 1 1 43 25 5 40 6 30 58 9 21 9 22 73 32 1 92 31 46 6 1 5 34 1 90 34 2 34 52 61 60 39 37 45 38 34 51 60 32 1 34 6 2 6 34 6 1 0 91 34 6 1 1 34 52 61 60 39 37 45 38 35 100 30 1 12 43 25 6 40 6 30 58 9 23 9 24 73 32 1 91 92 31 32 6 1 5 34 1 90 34 2 34 52 61 60 39 37 45 38 6 1 7 34 1 91 34 2 34 52 61 60 39 46 30 14 6 1 5 34 1 90 34 2 34 52 61 60 39 46 43 25 7 40 6 30 85 9 26 9 27 73 32 19 39 34 1 34 2 34 52 61 60 39 37 45 38 31 14 19 37 34 1 34 2 34 52 61 60 39 46 30 48 19 39 34 1 34 6 1 3 34 52 61 60 39 37 45 38 31 16 19 37 34 1 34 6 1 3 34 52 61 60 39 46 30 14 6 1 2 34 9 25 34 1 34 52 61 60 39 46 43 25 8 6 3 1 34 40 6 30 8 9 28 9 29 73 32 2 43 34 51 60 39 37 45 38 34 6 3 1 34 40 6 30 41 9 30 9 31 75 5 32 6 1 5 34 6 1 5 34 2 34 1 34 52 61 60 39 37 45 38 31 3 3 30 1 4 34 1 34 52 61 60 39 46 43 34 51 60 39 37 45 38 34 6 3 1 34 40 6 30 124 9 33 9 34 74 32 6 1 5 34 3 34 1 34 52 61 60 39 37 45 38 34 51 60 32 19 39 34 6 1 1 34 6 1 0 34 52 61 60 39 37 45 38 31 21 19 38 34 6 1 1 34 6 1 0 34 1 34 53 62 61 60 39 46 30 57 19 39 34 6 1 1 34 6 2 3 34 52 61 60 39 37 45 38 31 21 19 38 34 6 1 1 34 6 2 3 34 1 34 53 62 61 60 39 46 30 16 6 2 2 34 9 32 34 6 1 1 34 52 61 60 39 46 43 34 51 60 39 37 45 38 34 6 3 1 34 40 6 30 60 9 37 9 38 78 3 44 2 32 40 6 30 46 9 35 9 36 78 1 44 0 32 6 2 7 34 6 1 2 34 6 2 1 34 6 1 0 34 6 1 1 34 1 34 53 62 61 60 39 37 45 38 34 52 61 60 39 46 43 43 34 51 60 39 37 45 38 34 6 3 1 34 40 6 30 73 9 41 9 42 78 3 44 2 32 6 4 1 34 40 6 30 50 9 39 9 40 78 2 44 1 32 6 2 7 34 6 1 2 34 6 2 1 34 6 1 0 34 6 1 1 34 1 34 2 35 100 34 53 62 61 60 39 37 45 38 34 52 61 60 39 46 43 34 51 60 39 46 43 34 51 60 39 37 45 38 34 6 3 1 34 40 6 30 42 9 43 9 44 78 3 44 2 32 6 1 5 34 2 34 1 34 52 61 60 39 37 45 38 246 6 1 7 34 3 34 1 34 52 61 60 39 37 45 38 247 43 34 51 60 39 37 45 38 34 55 7 64 5 64 4 63 62 61 60 32 6 1 4 34 9 45 254 34 51 60 39 37 45 38 33 33 247 43 34 51 60 39 46 43 21 1 34 9 50 34 9 51 34 52 61 60 39 46 43 34 9 54 34 9 55 34 51 60 32 19 23 34 40 6 30 14 9 56 9 57 72 32 6 1 0 34 1 35 100 43 34 40 6 30 22 9 58 9 59 72 32 1 92 31 10 1 90 34 6 1 0 35 101 30 1 11 43 34 40 6 30 23 9 60 9 61 74 32 19 22 34 1 91 34 2 34 3 34 53 62 61 60 39 46 43 34 53 62 61 60 39 37 45 38 33 34 53 62 61 60 39 46 43)

;;; Entry point
5
