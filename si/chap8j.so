;;; Bytecode object file for si/chap8j.scm

;;; Dynamic variables
()

;;; Global modifiable variables
()

;;; Quotations
#(EXTEND! ERROR MAKE-TOPLEVEL "Too few arguments" "Too much arguments" (LAMBDA (ENV NAMES VALUES) (IF (PAIR? NAMES) (IF (PAIR? VALUES) (BEGIN (SET-VARIABLE-VALUE! (CAR NAMES) (CAR VALUES)) (EXTEND! ENV (CDR NAMES) (CDR VALUES))) (ERROR "Too few arguments" NAMES)) (IF (SYMBOL? NAMES) (SET-VARIABLE-VALUE! NAMES VALUES) (IF (NULL? NAMES) (IF (NULL? VALUES) NIL (ERROR "Too much arguments" VALUES)) NIL)))) ((EXTEND! (LOCAL 0 . 0)) (ERROR (LOCAL 0 . 1)) (MAKE-TOPLEVEL (LOCAL 0 . 2)) (EXIT (LOCAL 1 . 0))) *ERROR* ABORTED (LAMBDA (MSG HINT) (BEGIN (DISPLAY (LIST '*ERROR* MSG HINT)) (NEWLINE) (EXIT 'ABORTED))) ((EXTEND! (LOCAL 0 . 0)) (ERROR (LOCAL 0 . 1)) (MAKE-TOPLEVEL (LOCAL 0 . 2)) (EXIT (LOCAL 1 . 0))) TOPLEVEL EVAL EVLIS EPROGN REFERENCE BEGIN QUOTE IF SET! LAMBDA EXPORT (LAMBDA () (BEGIN (DISPLAY PROMPT-IN) ((LAMBDA (RESULT) (BEGIN (DISPLAY PROMPT-OUT) (DISPLAY RESULT) (NEWLINE))) (EVAL (READ) GLOBAL-ENV)) (TOPLEVEL))) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) (LAMBDA (E R) (IF (PAIR? E) ((LAMBDA (F) (IF (IF (PRIMITIVE? F) #T (CONTINUATION? F)) (APPLY F (EVLIS (CDR E) R)) (APPLY F R (CDR E)))) (EVAL (CAR E) R)) (IF (SYMBOL? E) (REFERENCE R E) E))) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) (LAMBDA (E* R) (IF (PAIR? E*) ((LAMBDA (V) (CONS V (EVLIS (CDR E*) R))) (EVAL (CAR E*) R)) NIL)) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) (LAMBDA (E+ R) (IF (PAIR? (CDR E+)) (BEGIN (EVAL (CAR E+) R) (EPROGN (CDR E+) R)) (EVAL (CAR E+) R))) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) "No such variable" (LAMBDA (R NAME) (IF (VARIABLE-DEFINED? NAME R) (VARIABLE-VALUE NAME R) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (VARIABLE-VALUE NAME GLOBAL-ENV) (ERROR "No such variable" NAME)))) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) (LAMBDA (R) (EPROGN FORMS R)) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) (LAMBDA (R QUOTATION) QUOTATION) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) (LAMBDA (R CONDITION THEN ELSE) (EVAL (IF (EVAL CONDITION R) THEN ELSE) R)) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) "No such variable" (LAMBDA (R NAME FORM) ((LAMBDA (V) (IF (VARIABLE-DEFINED? NAME R) (SET-VARIABLE-VALUE! NAME R V) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (SET-VARIABLE-VALUE! NAME GLOBAL-ENV V) (ERROR "No such variable" NAME)))) (EVAL FORM R))) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) (LAMBDA () ((LAMBDA (VALUES) ((LAMBDA (NEWENV) (BEGIN (EXTEND! NEWENV VARIABLES VALUES) (EPROGN NEWENV BODY))) (APPLY ENRICH R VARIABLES))) (EVLIS R PARAMETERS))) ((R (LOCAL 0 . 0)) (VARIABLES (LOCAL 0 . 1)) (BODY (LOCAL 0 . 2)) (TOPLEVEL (LOCAL 1 . 0)) (EVAL (LOCAL 1 . 1)) (EVLIS (LOCAL 1 . 2)) (EPROGN (LOCAL 1 . 3)) (REFERENCE (LOCAL 1 . 4)) (BEGIN (LOCAL 1 . 5)) '(LOCAL 1 . 6) (IF (LOCAL 1 . 7)) (SET! (LOCAL 1 . 8)) (LAMBDA (LOCAL 1 . 9)) (EXPORT (LOCAL 1 . 10)) (GLOBAL-ENV (LOCAL 2 . 0)) (PROMPT-IN (LOCAL 2 . 1)) (PROMPT-OUT (LOCAL 2 . 2)) (EXTEND! (LOCAL 3 . 0)) (ERROR (LOCAL 3 . 1)) (MAKE-TOPLEVEL (LOCAL 3 . 2)) (EXIT (LOCAL 4 . 0))) (LAMBDA (R VARIABLES BODY) (LAMBDA PARAMETERS ((LAMBDA (VALUES) ((LAMBDA (NEWENV) (BEGIN (EXTEND! NEWENV VARIABLES VALUES) (EPROGN NEWENV BODY))) (APPLY ENRICH R VARIABLES))) (EVLIS R PARAMETERS)))) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) (LAMBDA (R) R) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) ((TOPLEVEL (LOCAL 0 . 0)) (EVAL (LOCAL 0 . 1)) (EVLIS (LOCAL 0 . 2)) (EPROGN (LOCAL 0 . 3)) (REFERENCE (LOCAL 0 . 4)) (BEGIN (LOCAL 0 . 5)) '(LOCAL 0 . 6) (IF (LOCAL 0 . 7)) (SET! (LOCAL 0 . 8)) (LAMBDA (LOCAL 0 . 9)) (EXPORT (LOCAL 0 . 10)) (GLOBAL-ENV (LOCAL 1 . 0)) (PROMPT-IN (LOCAL 1 . 1)) (PROMPT-OUT (LOCAL 1 . 2)) (EXTEND! (LOCAL 2 . 0)) (ERROR (LOCAL 2 . 1)) (MAKE-TOPLEVEL (LOCAL 2 . 2)) (EXIT (LOCAL 3 . 0))) (LAMBDA (GLOBAL-ENV PROMPT-IN PROMPT-OUT) ((LAMBDA (TOPLEVEL EVAL EVLIS EPROGN REFERENCE BEGIN QUOTE IF SET! LAMBDA EXPORT) (BEGIN (SET! TOPLEVEL (LAMBDA () (BEGIN (DISPLAY PROMPT-IN) ((LAMBDA (RESULT) (BEGIN (DISPLAY PROMPT-OUT) (DISPLAY RESULT) (NEWLINE))) (EVAL (READ) GLOBAL-ENV)) (TOPLEVEL)))) (SET! EVAL (LAMBDA (E R) (IF (PAIR? E) ((LAMBDA (F) (IF (IF (PRIMITIVE? F) #T (CONTINUATION? F)) (APPLY F (EVLIS (CDR E) R)) (APPLY F R (CDR E)))) (EVAL (CAR E) R)) (IF (SYMBOL? E) (REFERENCE R E) E)))) (SET! EVLIS (LAMBDA (E* R) (IF (PAIR? E*) ((LAMBDA (V) (CONS V (EVLIS (CDR E*) R))) (EVAL (CAR E*) R)) NIL))) (SET! EPROGN (LAMBDA (E+ R) (IF (PAIR? (CDR E+)) (BEGIN (EVAL (CAR E+) R) (EPROGN (CDR E+) R)) (EVAL (CAR E+) R)))) (SET! REFERENCE (LAMBDA (R NAME) (IF (VARIABLE-DEFINED? NAME R) (VARIABLE-VALUE NAME R) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (VARIABLE-VALUE NAME GLOBAL-ENV) (ERROR "No such variable" NAME))))) (SET! BEGIN (LAMBDA (R . FORMS) (EPROGN FORMS R))) (SET! QUOTE (LAMBDA (R QUOTATION) QUOTATION)) (SET! IF (LAMBDA (R CONDITION THEN ELSE) (EVAL (IF (EVAL CONDITION R) THEN ELSE) R))) (SET! SET! (LAMBDA (R NAME FORM) ((LAMBDA (V) (IF (VARIABLE-DEFINED? NAME R) (SET-VARIABLE-VALUE! NAME R V) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (SET-VARIABLE-VALUE! NAME GLOBAL-ENV V) (ERROR "No such variable" NAME)))) (EVAL FORM R)))) (SET! LAMBDA (LAMBDA (R VARIABLES BODY) (LAMBDA PARAMETERS ((LAMBDA (VALUES) ((LAMBDA (NEWENV) (BEGIN (EXTEND! NEWENV VARIABLES VALUES) (EPROGN NEWENV BODY))) (APPLY ENRICH R VARIABLES))) (EVLIS R PARAMETERS))))) (SET! EXPORT (LAMBDA (R) R)) (SET! GLOBAL-ENV (EXPORT)) (TOPLEVEL))) 'TOPLEVEL 'EVAL 'EVLIS 'EPROGN 'REFERENCE 'BEGIN 'QUOTE 'IF 'SET! 'LAMBDA 'EXPORT)) ((EXTEND! (LOCAL 0 . 0)) (ERROR (LOCAL 0 . 1)) (MAKE-TOPLEVEL (LOCAL 0 . 2)) (EXIT (LOCAL 1 . 0))) ((EXTEND! (LOCAL 0 . 0)) (ERROR (LOCAL 0 . 1)) (MAKE-TOPLEVEL (LOCAL 0 . 2)) (EXIT (LOCAL 1 . 0))) "?? " "== " (LAMBDA (EXIT) ((LAMBDA (EXTEND! ERROR MAKE-TOPLEVEL) (BEGIN (SET! EXTEND! (LAMBDA (ENV NAMES VALUES) (IF (PAIR? NAMES) (IF (PAIR? VALUES) (BEGIN (SET-VARIABLE-VALUE! (CAR NAMES) (CAR VALUES)) (EXTEND! ENV (CDR NAMES) (CDR VALUES))) (ERROR "Too few arguments" NAMES)) (IF (SYMBOL? NAMES) (SET-VARIABLE-VALUE! NAMES VALUES) (IF (NULL? NAMES) (IF (NULL? VALUES) NIL (ERROR "Too much arguments" VALUES)) NIL))))) (SET! ERROR (LAMBDA (MSG HINT) (BEGIN (DISPLAY (LIST '*ERROR* MSG HINT)) (NEWLINE) (EXIT 'ABORTED)))) (SET! MAKE-TOPLEVEL (LAMBDA (GLOBAL-ENV PROMPT-IN PROMPT-OUT) ((LAMBDA (TOPLEVEL EVAL EVLIS EPROGN REFERENCE BEGIN QUOTE IF SET! LAMBDA EXPORT) (BEGIN (SET! TOPLEVEL (LAMBDA () (BEGIN (DISPLAY PROMPT-IN) ((LAMBDA (RESULT) (BEGIN (DISPLAY PROMPT-OUT) (DISPLAY RESULT) (NEWLINE))) (EVAL (READ) GLOBAL-ENV)) (TOPLEVEL)))) (SET! EVAL (LAMBDA (E R) (IF (PAIR? E) ((LAMBDA (F) (IF (IF (PRIMITIVE? F) #T (CONTINUATION? F)) (APPLY F (EVLIS (CDR E) R)) (APPLY F R (CDR E)))) (EVAL (CAR E) R)) (IF (SYMBOL? E) (REFERENCE R E) E)))) (SET! EVLIS (LAMBDA (E* R) (IF (PAIR? E*) ((LAMBDA (V) (CONS V (EVLIS (CDR E*) R))) (EVAL (CAR E*) R)) NIL))) (SET! EPROGN (LAMBDA (E+ R) (IF (PAIR? (CDR E+)) (BEGIN (EVAL (CAR E+) R) (EPROGN (CDR E+) R)) (EVAL (CAR E+) R)))) (SET! REFERENCE (LAMBDA (R NAME) (IF (VARIABLE-DEFINED? NAME R) (VARIABLE-VALUE NAME R) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (VARIABLE-VALUE NAME GLOBAL-ENV) (ERROR "No such variable" NAME))))) (SET! BEGIN (LAMBDA (R . FORMS) (EPROGN FORMS R))) (SET! QUOTE (LAMBDA (R QUOTATION) QUOTATION)) (SET! IF (LAMBDA (R CONDITION THEN ELSE) (EVAL (IF (EVAL CONDITION R) THEN ELSE) R))) (SET! SET! (LAMBDA (R NAME FORM) ((LAMBDA (V) (IF (VARIABLE-DEFINED? NAME R) (SET-VARIABLE-VALUE! NAME R V) (IF (VARIABLE-DEFINED? NAME GLOBAL-ENV) (SET-VARIABLE-VALUE! NAME GLOBAL-ENV V) (ERROR "No such variable" NAME)))) (EVAL FORM R)))) (SET! LAMBDA (LAMBDA (R VARIABLES BODY) (LAMBDA PARAMETERS ((LAMBDA (VALUES) ((LAMBDA (NEWENV) (BEGIN (EXTEND! NEWENV VARIABLES VALUES) (EPROGN NEWENV BODY))) (APPLY ENRICH R VARIABLES))) (EVLIS R PARAMETERS))))) (SET! EXPORT (LAMBDA (R) R)) (SET! GLOBAL-ENV (EXPORT)) (TOPLEVEL))) 'TOPLEVEL 'EVAL 'EVLIS 'EPROGN 'REFERENCE 'BEGIN 'QUOTE 'IF 'SET! 'LAMBDA 'EXPORT))) (MAKE-TOPLEVEL (EXPORT) "?? " "== "))) 'EXTEND! 'ERROR 'MAKE-TOPLEVEL)) ())

;;; Bytecode
#(245 20 247 38 43 19 21 34 40 7 28 246 3 9 54 9 55 72 32 9 0 34 9 1 34 9 2 34 53 62 61 60 32 40 6 30 113 9 5 9 6 74 32 2 92 31 56 3 92 31 36 19 38 34 2 90 34 3 90 34 52 61 60 39 37 45 38 6 1 0 34 1 34 2 91 34 3 91 34 53 62 61 60 39 46 30 14 6 1 1 34 9 3 34 2 34 52 61 60 39 46 30 46 2 93 31 14 19 38 34 2 34 3 34 52 61 60 39 46 30 28 2 96 31 23 3 96 31 3 12 30 14 6 1 1 34 9 4 34 3 34 52 61 60 39 46 30 1 12 43 21 40 6 30 38 9 9 9 10 73 32 19 23 34 9 7 34 1 34 2 34 53 62 61 60 39 37 45 38 94 88 6 2 0 34 9 8 34 51 60 39 46 43 22 40 7 28 40 3 9 49 9 50 74 32 9 11 34 9 12 34 9 13 34 9 14 34 9 15 34 9 16 34 9 17 34 9 18 34 9 19 34 9 20 34 9 21 34 55 12 64 10 64 9 64 8 64 7 64 6 64 5 64 4 63 62 61 60 32 40 6 30 47 9 22 9 23 71 32 6 2 1 94 6 1 1 34 89 34 6 2 0 34 52 61 60 39 37 45 38 34 51 60 32 6 3 2 94 1 94 88 33 6 1 0 34 50 39 46 43 21 40 6 30 117 9 24 9 25 73 32 1 92 31 86 6 1 1 34 1 90 34 2 34 52 61 60 39 37 45 38 34 51 60 32 1 95 31 3 10 30 2 1 97 31 33 19 22 34 1 34 6 2 2 34 6 1 0 91 34 6 1 1 34 52 61 60 39 37 45 38 34 52 61 60 39 46 30 20 19 22 34 1 34 6 1 1 34 6 1 0 91 34 53 62 61 60 39 46 30 20 1 93 31 15 6 1 4 34 2 34 1 34 52 61 60 39 46 30 1 1 43 22 40 6 30 58 9 26 9 27 73 32 1 92 31 46 6 1 1 34 1 90 34 2 34 52 61 60 39 37 45 38 34 51 60 32 1 34 6 2 2 34 6 1 0 91 34 6 1 1 34 52 61 60 39 37 45 38 35 100 30 1 12 43 23 40 6 30 58 9 28 9 29 73 32 1 91 92 31 32 6 1 1 34 1 90 34 2 34 52 61 60 39 37 45 38 6 1 3 34 1 91 34 2 34 52 61 60 39 46 30 14 6 1 1 34 1 90 34 2 34 52 61 60 39 46 43 24 40 6 30 85 9 31 9 32 73 32 19 39 34 2 34 1 34 52 61 60 39 37 45 38 31 14 19 37 34 2 34 1 34 52 61 60 39 46 30 48 19 39 34 2 34 6 2 0 34 52 61 60 39 37 45 38 31 16 19 37 34 2 34 6 2 0 34 52 61 60 39 46 30 14 6 3 1 34 9 30 34 2 34 52 61 60 39 46 43 25 4 40 6 30 23 9 33 9 34 78 2 44 1 32 6 1 3 34 2 34 1 34 52 61 60 39 46 43 25 5 40 6 30 8 9 35 9 36 73 32 2 43 25 6 40 6 30 41 9 37 9 38 75 5 32 6 1 1 34 6 1 1 34 2 34 1 34 52 61 60 39 37 45 38 31 3 3 30 1 4 34 1 34 52 61 60 39 46 43 25 7 40 6 30 124 9 40 9 41 74 32 6 1 1 34 3 34 1 34 52 61 60 39 37 45 38 34 51 60 32 19 39 34 6 1 1 34 6 1 0 34 52 61 60 39 37 45 38 31 21 19 38 34 6 1 1 34 6 1 0 34 1 34 53 62 61 60 39 46 30 57 19 39 34 6 1 1 34 6 3 0 34 52 61 60 39 37 45 38 31 21 19 38 34 6 1 1 34 6 3 0 34 1 34 53 62 61 60 39 46 30 16 6 4 1 34 9 39 34 6 1 1 34 52 61 60 39 46 43 25 8 40 6 30 105 9 44 9 45 74 32 40 6 30 94 9 42 9 43 78 1 44 0 32 6 2 2 34 6 1 0 34 1 34 52 61 60 39 37 45 38 34 51 60 32 19 22 34 19 34 34 6 2 0 34 6 2 1 34 53 62 61 60 39 37 45 38 34 51 60 32 6 6 0 34 1 34 6 3 1 34 6 1 0 34 53 62 61 60 39 37 45 38 6 4 3 34 1 34 6 3 2 34 52 61 60 39 46 43 43 25 9 40 6 30 8 9 46 9 47 72 32 1 43 25 10 9 48 254 26 1 0 1 34 50 39 46 43 23 3 34 9 51 254 34 9 52 34 9 53 34 53 62 61 60 39 46 43 34 51 60 39 46 43)

;;; Entry point
5
